#!/home/tj/sage/sage --python

import sys
from sage.all import *
import re, string

if len(sys.argv) < 3 :
    print "Usage: %s n f1 [... fk]"%sys.argv[0]
    print "Outputs the groebner basis of the ideal over n variables generated by f1 .. fk"
    sys.exit(1)

#numvars = int(sys.argv[1]);

functions = sys.argv[2:];

maxvar = 0;

renumbering = dict(); #(renumbering[origvar] = newvar)
oldnumbering = dict();#(oldnumbering[newvar] = origvar)
#renumber vars
for fidx, f in enumerate(functions):
    fvars = re.finditer(r"x[0-9]*",f);
    for vmatch in fvars:
        v = vmatch.group(int(0));
        # print "var: ", v;
        if v in renumbering:
            #if there's already a renumbering, replace it.
            # print "have a renumbering, replacing ", v, " with ", renumbering[v];
            functions[fidx] = string.replace(functions[fidx],v,renumbering[v]); 
        else:
            newvar = 'x' + str(maxvar);
            renumbering[v] = newvar;
            oldnumbering[newvar] = v;
            maxvar += 1;
            # print "made a renumbering, replacing ", v, " with ", renumbering[v];
            functions[fidx] = string.replace(functions[fidx],v,renumbering[v]); 
            
numvars = maxvar;

#BooleanPolynomialRing takes field equations into consideration
R = BooleanPolynomialRing(numvars,'x')

vars = {'R':R}
sage_eval('None',cmds='R.inject_variables();',locals = vars)

I = R.ideal([sage_eval(f,locals=vars) for f in functions])
 #make ideal over R

B = I.groebner_basis();

#print B

#get the polynomials in ANF (basically just by distributing any terms
#that can be distributed)

ANF = [str(expand(f)) for f in B]
#print "going back to old numbering"
for fidx, f in enumerate(ANF):
    fvars = re.finditer(r"x[0-9]*",f);
    for vmatch in fvars:
        v = vmatch.group(int(0));
        # print "var: ", v;
        if v in oldnumbering:
            #print "have a renumbering, replacing ", v, " with ", oldnumbering[v];
            ANF[fidx] = string.replace(ANF[fidx],v,oldnumbering[v]); 
print ANF
